"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var redux_1 = require("redux");
var redux_promise_middleware_1 = __importDefault(require("redux-promise-middleware"));
var react_test_renderer_1 = __importDefault(require("react-test-renderer"));
var index_1 = __importDefault(require("../src/index"));
var appCtx = { ctx: {}, Component: null, router: null };
var reducer = function (state, action) {
    if (state === void 0) { state = { reduxStatus: 'init' }; }
    switch (action.type) {
        case 'FOO': // sync
        case 'FOO_FULFILLED': // async
            return { reduxStatus: action.payload };
        default:
            return state;
    }
};
var makeStore = function (initialState) { return redux_1.createStore(reducer, initialState, redux_1.applyMiddleware(redux_promise_middleware_1.default())); };
var SyncPageBase = /** @class */ (function (_super) {
    __extends(SyncPageBase, _super);
    function SyncPageBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SyncPageBase.prototype.render = function () {
        var _a = this.props, store = _a.store, props = __rest(_a, ["store"]);
        return (react_1.default.createElement("div", null,
            JSON.stringify(props),
            JSON.stringify(store.getState())));
    };
    return SyncPageBase;
}(react_1.Component));
var SyncPage = /** @class */ (function (_super) {
    __extends(SyncPage, _super);
    function SyncPage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SyncPage.getInitialProps = function (_a) {
        var ctx = _a.ctx;
        ctx.store.dispatch({ type: 'FOO', payload: 'foo' });
        return { custom: 'custom' };
    };
    return SyncPage;
}(SyncPageBase));
var someAsyncAction = {
    type: 'FOO',
    payload: new Promise(function (res) { return res('foo'); })
};
var AsyncPage = /** @class */ (function (_super) {
    __extends(AsyncPage, _super);
    function AsyncPage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AsyncPage.getInitialProps = function (_a) {
        var ctx = _a.ctx;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, ctx.store.dispatch(someAsyncAction)];
                    case 1:
                        _b.sent();
                        return [2 /*return*/, { custom: 'custom' }];
                }
            });
        });
    };
    return AsyncPage;
}(SyncPageBase));
function verifyComponent(WrappedPage) {
    return __awaiter(this, void 0, void 0, function () {
        var props, component, tree;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, WrappedPage.getInitialProps(appCtx)];
                case 1:
                    props = _a.sent();
                    expect(props.initialProps.custom).toBe('custom');
                    expect(props.initialState.reduxStatus).toBe('foo');
                    component = react_test_renderer_1.default.create(react_1.default.createElement(WrappedPage, __assign({}, props)));
                    tree = component.toJSON();
                    expect(tree).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    });
}
test('simple store integration', function () { return __awaiter(_this, void 0, void 0, function () {
    var WrappedPage;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                WrappedPage = index_1.default(makeStore)(SyncPage);
                return [4 /*yield*/, verifyComponent(WrappedPage)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
test('async store integration', function () { return __awaiter(_this, void 0, void 0, function () {
    var WrappedPage;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                WrappedPage = index_1.default(makeStore)(AsyncPage);
                return [4 /*yield*/, verifyComponent(WrappedPage)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
describe('custom serialization', function () {
    test('custom state serialization on the server and deserialization on the client', function () { return __awaiter(_this, void 0, void 0, function () {
        var MyApp, WrappedPage, props, component, tree;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    MyApp = /** @class */ (function (_super) {
                        __extends(MyApp, _super);
                        function MyApp() {
                            return _super !== null && _super.apply(this, arguments) || this;
                        }
                        MyApp.prototype.render = function () {
                            var store = this.props.store;
                            return react_1.default.createElement("div", null, JSON.stringify(store.getState()));
                        };
                        return MyApp;
                    }(react_1.Component));
                    WrappedPage = index_1.default(makeStore, {
                        serializeState: function (state) { return (__assign({}, state, { serialized: true })); },
                        deserializeState: function (state) { return (__assign({}, state, { deserialized: true })); }
                    })(MyApp);
                    return [4 /*yield*/, WrappedPage.getInitialProps(appCtx)];
                case 1:
                    props = _a.sent();
                    expect(props.initialState.serialized).toBeTruthy();
                    component = react_test_renderer_1.default.create(react_1.default.createElement(WrappedPage, __assign({}, props)));
                    tree = component.toJSON();
                    expect(tree).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=index.spec.js.map