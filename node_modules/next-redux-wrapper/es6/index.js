var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import React, { Component } from 'react';
const _debug = false;
const DEFAULT_KEY = '__NEXT_REDUX_STORE__';
const isServer = typeof window === 'undefined';
const initStore = ({ makeStore, initialState, config, ctx }) => {
    const { storeKey } = config;
    const createStore = () => makeStore(config.deserializeState(initialState), Object.assign({}, ctx, config, { isServer }));
    if (isServer)
        return createStore();
    // Memoize store if client
    if (!window[storeKey]) {
        window[storeKey] = createStore();
    }
    return window[storeKey];
};
export default (makeStore, config) => {
    config = Object.assign({ storeKey: DEFAULT_KEY, debug: _debug, serializeState: state => state, deserializeState: state => state }, config);
    return (App) => { var _a; return _a = class WrappedApp extends Component {
            constructor(props, context) {
                super(props, context);
                const { initialState } = props;
                if (config.debug)
                    console.log('4. WrappedApp.render created new store with initialState', initialState);
                this.store = initStore({
                    makeStore,
                    initialState,
                    config
                });
            }
            render() {
                const _a = this.props, { initialProps, initialState } = _a, props = __rest(_a, ["initialProps", "initialState"]);
                // Cmp render must return something like <Provider><Component/></Provider>
                return React.createElement(App, Object.assign({}, props, initialProps, { store: this.store }));
            }
        },
        _a.displayName = `withRedux(${App.displayName || App.name || 'App'})`,
        _a.getInitialProps = (appCtx) => __awaiter(this, void 0, void 0, function* () {
            if (!appCtx)
                throw new Error('No app context');
            if (!appCtx.ctx)
                throw new Error('No page context');
            const store = initStore({
                makeStore,
                config,
                ctx: appCtx.ctx
            });
            if (config.debug)
                console.log('1. WrappedApp.getInitialProps wrapper got the store with state', store.getState());
            appCtx.ctx.store = store;
            appCtx.ctx.isServer = isServer;
            let initialProps = {};
            if ('getInitialProps' in App) {
                initialProps = yield App.getInitialProps.call(App, appCtx);
            }
            if (config.debug)
                console.log('3. WrappedApp.getInitialProps has store state', store.getState());
            return {
                isServer,
                initialState: config.serializeState(store.getState()),
                initialProps
            };
        }),
        _a; };
};
//# sourceMappingURL=index.js.map