var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import React, { Component } from 'react';
import { applyMiddleware, createStore } from 'redux';
import promiseMiddleware from 'redux-promise-middleware';
import renderer from 'react-test-renderer';
import withRedux from '../src/index';
const appCtx = { ctx: {}, Component: null, router: null };
const reducer = (state = { reduxStatus: 'init' }, action) => {
    switch (action.type) {
        case 'FOO': // sync
        case 'FOO_FULFILLED': // async
            return { reduxStatus: action.payload };
        default:
            return state;
    }
};
const makeStore = initialState => createStore(reducer, initialState, applyMiddleware(promiseMiddleware()));
class SyncPageBase extends Component {
    render() {
        const _a = this.props, { store } = _a, props = __rest(_a, ["store"]);
        return (React.createElement("div", null,
            JSON.stringify(props),
            JSON.stringify(store.getState())));
    }
}
class SyncPage extends SyncPageBase {
    static getInitialProps({ ctx }) {
        ctx.store.dispatch({ type: 'FOO', payload: 'foo' });
        return { custom: 'custom' };
    }
}
const someAsyncAction = {
    type: 'FOO',
    payload: new Promise(res => res('foo'))
};
class AsyncPage extends SyncPageBase {
    static getInitialProps({ ctx }) {
        return __awaiter(this, void 0, void 0, function* () {
            yield ctx.store.dispatch(someAsyncAction);
            return { custom: 'custom' };
        });
    }
}
function verifyComponent(WrappedPage) {
    return __awaiter(this, void 0, void 0, function* () {
        // this is called by Next.js
        const props = yield WrappedPage.getInitialProps(appCtx);
        expect(props.initialProps.custom).toBe('custom');
        expect(props.initialState.reduxStatus).toBe('foo');
        // this is called by Next.js
        const component = renderer.create(React.createElement(WrappedPage, Object.assign({}, props)));
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
    });
}
test('simple store integration', () => __awaiter(this, void 0, void 0, function* () {
    const WrappedPage = withRedux(makeStore)(SyncPage);
    yield verifyComponent(WrappedPage);
}));
test('async store integration', () => __awaiter(this, void 0, void 0, function* () {
    const WrappedPage = withRedux(makeStore)(AsyncPage);
    yield verifyComponent(WrappedPage);
}));
describe('custom serialization', () => {
    test('custom state serialization on the server and deserialization on the client', () => __awaiter(this, void 0, void 0, function* () {
        class MyApp extends Component {
            render() {
                const { store } = this.props;
                return React.createElement("div", null, JSON.stringify(store.getState()));
            }
        }
        const WrappedPage = withRedux(makeStore, {
            serializeState: state => (Object.assign({}, state, { serialized: true })),
            deserializeState: state => (Object.assign({}, state, { deserialized: true }))
        })(MyApp);
        const props = yield WrappedPage.getInitialProps(appCtx);
        expect(props.initialState.serialized).toBeTruthy();
        const component = renderer.create(React.createElement(WrappedPage, Object.assign({}, props)));
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
    }));
});
//# sourceMappingURL=index.spec.js.map